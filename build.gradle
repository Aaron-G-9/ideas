buildscript {
	ext {
		springBootVersion = '2.0.1.RELEASE'
	}
	repositories {
		maven {
          url "https://maven.oakland.edu/nexus/content/groups/public"
          name "nexus"
        }
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {  
    id "com.moowork.node" version "1.2.0"   
    id "net.linguica.maven-settings" version "0.5" 
}

node {
  // Version of node to use.
  version = '9.11.1'
  // Base URL for fetching node distributions (change if you have a mirror).
  distBaseUrl = 'https://nodejs.org/dist'
  // If true, it will download node using above parameters.
  // If false, it will try to use globally installed node.
  download = true
  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodejs")
  // Set the work directory where node_modules should be located

  // Set the work directory for Yarn
  yarnWorkDir = file("${project.buildDir}/yarn")

  nodeModulesDir = file("src/main/react")
}


apply plugin: 'com.moowork.node'
apply plugin: 'eclipse-wtp'
apply plugin: 'io.spring.dependency-management' // <-- add this to your build.gradle
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'

war {
    archiveName project.name + '.war'
}

bootWar {
    archiveName project.name + '.war'
}

group = 'edu.oakland.portlet'
version = '1.0.0'

publishing {
    publications {
        mavenWeb(MavenPublication) {
            from components.web
        }
    }

    repositories {
        maven {
            url "https://maven.oakland.edu/nexus/content/repositories/uPortal"
            name "nexus"
        }
    }
}


sourceCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
}

configurations {
	providedRuntime
}

task runBuild(type: YarnTask) {
  args = ['run', 'build']
}

task copyTask(type: Copy) {
  from 'src/main/react/build/static/'
  into 'src/main/webapp/'
}

clean.doFirst{
  delete 'src/main/webapp/js'
}

clean.finalizedBy(yarn_install)
yarn_install.finalizedBy(runBuild)
runBuild.finalizedBy(copyTask)

war {
  archiveName project.name + '.war'
}

processResources {

    filesMatching('**/application.properties') {
		def props = new Properties()

		file(System.getProperty("filters")).withInputStream {
			props.load(it)
		}

		filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: props)
    }
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-cache')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.postgresql:postgresql')
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	providedRuntime('org.apache.tomcat.embed:tomcat-embed-jasper')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	compile ('org.jasig.portal:uPortal-soffit-renderer:5.0.0-OU-1-c75b429c26')	
	compile('org.jasig.portal:uPortal-soffit-core:5.0.0-OU-1-c75b429c26')
	compile("org.jasypt:jasypt:1.9.2")
	compileOnly('org.projectlombok:lombok')
	compile("org.apache.commons:commons-lang3:3.4")
	compile("org.springframework:spring-jdbc")
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
  compile("edu.oakland:jwt-service:0.1.0")
  runtime("org.springframework.boot:spring-boot-properties-migrator")
}
